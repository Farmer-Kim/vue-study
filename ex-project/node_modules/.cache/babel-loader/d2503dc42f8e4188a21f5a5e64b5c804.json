{"remainingRequest":"C:\\Users\\itfact\\Downloads\\ex-project\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\itfact\\Downloads\\ex-project\\src\\store.js","dependencies":[{"path":"C:\\Users\\itfact\\Downloads\\ex-project\\src\\store.js","mtime":1648988635880},{"path":"C:\\Users\\itfact\\Downloads\\ex-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647867744924},{"path":"C:\\Users\\itfact\\Downloads\\ex-project\\node_modules\\babel-loader\\lib\\index.js","mtime":1647867745404}],"contextDependencies":[],"result":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport router from \"./router\";\nimport axios from \"axios\";\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    userInfo: null,\n    allUsers: [{\n      id: 1,\n      name: \"hoza\",\n      email: \"hoza@gmail.com\",\n      password: \"123456\"\n    }, {\n      id: 2,\n      name: \"lego\",\n      email: \"lego@gmail.com\",\n      password: \"123456\"\n    }],\n    isLogin: false,\n    isLoginError: false\n  },\n  mutations: {\n    // 로그인이 성공했을 때,\n    loginSuccess: function loginSuccess(state, payload) {\n      state.isLogin = true;\n      state.isLoginError = false;\n      state.userInfo = payload;\n    },\n    // 로그인이 실패했을 때\n    loginError: function loginError(state) {\n      state.isLoginError = false;\n      state.isLoginError = true;\n    },\n    logout: function logout(state) {\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    }\n  },\n  actions: {\n    // 로그인 시도\n    login: function login(_ref, loginObj) {\n      var dispatch = _ref.dispatch;\n      // 로그인 -> 토큰 반환\n      axios.post(\"https://reqres.in/api/login\", loginObj).then(function (res) {\n        // 성공 시 token 생성\n        // 토큰을 헤더에 포함시켜 유저정보 요청\n        var token = res.data.token; // 토큰을 로컬스토리지에 저장\n\n        localStorage.setItem(\"access_token\", token);\n        dispatch(\"getMemberInfo\");\n      }).catch(function () {\n        alert(\"이메일과 비밀번호를 확인하세요\");\n      }); // let selectedUser = null;\n      // state.allUsers.forEach((user) => {\n      //   if (user.email === loginObj.email) selectedUser = user;\n      // });\n      // if (selectedUser === null || selectedUser.password !== loginObj.password)\n      //   commit(\"loginError\");\n      // else commit(\"loginSuccess\", selectedUser);\n      // router.push({ name: \"mypage\" });\n    },\n    logout: function logout(_ref2) {\n      var commit = _ref2.commit;\n      commit(\"logout\");\n      router.push({\n        name: \"home\"\n      });\n    }\n  },\n  getMemberInfo: function getMemberInfo(_ref3) {\n    var commit = _ref3.commit;\n    // 로컬 스토리지에 저장되어 있는 토큰을 불러온다/\n    var token = localStorage.getItem(\"access_token\");\n    var config = {\n      headers: {\n        \"access-token\": token\n      }\n    }; // 토큰 -> 멤버 정보를 반환\n    // 새로 고침 -> 토큰만 가지고 멤버정보를 요청\n\n    axios.get(\"https://reqres.in/api/users/2\", config).then(function (response) {\n      var userInfo = {\n        id: response.data.data.id,\n        first_name: response.data.data.first_name,\n        last_name: response.data.data.last_name,\n        avatar: response.data.data.avatar\n      };\n      commit(\"loginSuccess\", userInfo);\n    }).catch(function () {\n      alert(\"이메일과 비밀번호를 확인하세요\");\n    });\n  }\n});",{"version":3,"sources":["C:\\Users\\itfact\\Downloads\\ex-project\\src\\store.js"],"names":["Vue","Vuex","router","axios","use","Store","state","userInfo","allUsers","id","name","email","password","isLogin","isLoginError","mutations","loginSuccess","payload","loginError","logout","actions","login","loginObj","dispatch","post","then","res","token","data","localStorage","setItem","catch","alert","commit","push","getMemberInfo","getItem","config","headers","get","response","first_name","last_name","avatar"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEAH,IAAII,GAAJ,CAAQH,IAAR;AAEA,eAAe,IAAIA,KAAKI,KAAT,CAAe;AAC5BC,SAAO;AACLC,cAAU,IADL;AAELC,cAAU,CACR;AAAEC,UAAI,CAAN;AAASC,YAAM,MAAf;AAAuBC,aAAO,gBAA9B;AAAgDC,gBAAU;AAA1D,KADQ,EAER;AAAEH,UAAI,CAAN;AAASC,YAAM,MAAf;AAAuBC,aAAO,gBAA9B;AAAgDC,gBAAU;AAA1D,KAFQ,CAFL;AAMLC,aAAS,KANJ;AAOLC,kBAAc;AAPT,GADqB;AAU5BC,aAAW;AACT;AACAC,gBAFS,wBAEIV,KAFJ,EAEWW,OAFX,EAEoB;AAC3BX,YAAMO,OAAN,GAAgB,IAAhB;AACAP,YAAMQ,YAAN,GAAqB,KAArB;AACAR,YAAMC,QAAN,GAAiBU,OAAjB;AACD,KANQ;AAOT;AACAC,cARS,sBAQEZ,KARF,EAQS;AAChBA,YAAMQ,YAAN,GAAqB,KAArB;AACAR,YAAMQ,YAAN,GAAqB,IAArB;AACD,KAXQ;AAYTK,UAZS,kBAYFb,KAZE,EAYK;AACZA,YAAMO,OAAN,GAAgB,KAAhB;AACAP,YAAMQ,YAAN,GAAqB,KAArB;AACAR,YAAMC,QAAN,GAAiB,IAAjB;AACD;AAhBQ,GAViB;AA4B5Ba,WAAS;AACP;AACAC,SAFO,uBAEaC,QAFb,EAEuB;AAAA,UAAtBC,QAAsB,QAAtBA,QAAsB;AAC5B;AACApB,YACGqB,IADH,CACQ,6BADR,EACuCF,QADvC,EAEGG,IAFH,CAEQ,UAACC,GAAD,EAAS;AACb;AACA;AACA,YAAIC,QAAQD,IAAIE,IAAJ,CAASD,KAArB,CAHa,CAIb;;AACAE,qBAAaC,OAAb,CAAqB,cAArB,EAAqCH,KAArC;AACAJ,iBAAS,eAAT;AACD,OATH,EAUGQ,KAVH,CAUS,YAAM;AACXC,cAAM,kBAAN;AACD,OAZH,EAF4B,CAe5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KAzBM;AA0BPb,UA1BO,yBA0BY;AAAA,UAAVc,MAAU,SAAVA,MAAU;AACjBA,aAAO,QAAP;AACA/B,aAAOgC,IAAP,CAAY;AAAExB,cAAM;AAAR,OAAZ;AACD;AA7BM,GA5BmB;AA2D5ByB,eA3D4B,gCA2DF;AAAA,QAAVF,MAAU,SAAVA,MAAU;AACxB;AACA,QAAIN,QAAQE,aAAaO,OAAb,CAAqB,cAArB,CAAZ;AACA,QAAIC,SAAS;AACXC,eAAS;AACP,wBAAgBX;AADT;AADE,KAAb,CAHwB,CAQxB;AACA;;AACAxB,UACGoC,GADH,CACO,+BADP,EACwCF,MADxC,EAEGZ,IAFH,CAEQ,UAACe,QAAD,EAAc;AAClB,UAAIjC,WAAW;AACbE,YAAI+B,SAASZ,IAAT,CAAcA,IAAd,CAAmBnB,EADV;AAEbgC,oBAAYD,SAASZ,IAAT,CAAcA,IAAd,CAAmBa,UAFlB;AAGbC,mBAAWF,SAASZ,IAAT,CAAcA,IAAd,CAAmBc,SAHjB;AAIbC,gBAAQH,SAASZ,IAAT,CAAcA,IAAd,CAAmBe;AAJd,OAAf;AAMAV,aAAO,cAAP,EAAuB1B,QAAvB;AACD,KAVH,EAWGwB,KAXH,CAWS,YAAM;AACXC,YAAM,kBAAN;AACD,KAbH;AAcD;AAnF2B,CAAf,CAAf","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport router from \"./router\";\nimport axios from \"axios\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    userInfo: null,\n    allUsers: [\n      { id: 1, name: \"hoza\", email: \"hoza@gmail.com\", password: \"123456\" },\n      { id: 2, name: \"lego\", email: \"lego@gmail.com\", password: \"123456\" },\n    ],\n    isLogin: false,\n    isLoginError: false,\n  },\n  mutations: {\n    // 로그인이 성공했을 때,\n    loginSuccess(state, payload) {\n      state.isLogin = true;\n      state.isLoginError = false;\n      state.userInfo = payload;\n    },\n    // 로그인이 실패했을 때\n    loginError(state) {\n      state.isLoginError = false;\n      state.isLoginError = true;\n    },\n    logout(state) {\n      state.isLogin = false;\n      state.isLoginError = false;\n      state.userInfo = null;\n    },\n  },\n  actions: {\n    // 로그인 시도\n    login({ dispatch }, loginObj) {\n      // 로그인 -> 토큰 반환\n      axios\n        .post(\"https://reqres.in/api/login\", loginObj)\n        .then((res) => {\n          // 성공 시 token 생성\n          // 토큰을 헤더에 포함시켜 유저정보 요청\n          let token = res.data.token;\n          // 토큰을 로컬스토리지에 저장\n          localStorage.setItem(\"access_token\", token);\n          dispatch(\"getMemberInfo\");\n        })\n        .catch(() => {\n          alert(\"이메일과 비밀번호를 확인하세요\");\n        });\n      // let selectedUser = null;\n      // state.allUsers.forEach((user) => {\n      //   if (user.email === loginObj.email) selectedUser = user;\n      // });\n      // if (selectedUser === null || selectedUser.password !== loginObj.password)\n      //   commit(\"loginError\");\n      // else commit(\"loginSuccess\", selectedUser);\n      // router.push({ name: \"mypage\" });\n    },\n    logout({ commit }) {\n      commit(\"logout\");\n      router.push({ name: \"home\" });\n    },\n  },\n  getMemberInfo({ commit }) {\n    // 로컬 스토리지에 저장되어 있는 토큰을 불러온다/\n    let token = localStorage.getItem(\"access_token\");\n    let config = {\n      headers: {\n        \"access-token\": token,\n      },\n    };\n    // 토큰 -> 멤버 정보를 반환\n    // 새로 고침 -> 토큰만 가지고 멤버정보를 요청\n    axios\n      .get(\"https://reqres.in/api/users/2\", config)\n      .then((response) => {\n        let userInfo = {\n          id: response.data.data.id,\n          first_name: response.data.data.first_name,\n          last_name: response.data.data.last_name,\n          avatar: response.data.data.avatar,\n        };\n        commit(\"loginSuccess\", userInfo);\n      })\n      .catch(() => {\n        alert(\"이메일과 비밀번호를 확인하세요\");\n      });\n  },\n});\n"]}]}